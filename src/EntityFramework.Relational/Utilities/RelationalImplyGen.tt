<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var systemTypes = new [] {
        "char",
        "short",
        "ushort",
        "int",
        "uint",
        "long",
        "ulong",
        "double",
        "decimal",
        "float",
        "bool",
        "byte",
        "Guid",
        "TimeSpan",
        "DateTime",
        "DateTimeOffset",
	};
#>
// <auto-generated />
// ReSharper disable InconsistentNaming

#pragma warning disable 0169 

using System;

namespace Microsoft.Data.Entity.Utilities
{
	internal partial class RelationalImplyTypes
	{
		// value types
<# 
foreach(var type in systemTypes) {
#>
		RelationalImplyGeneric<<#= type #>> <#= NewPropName() #>;
		RelationalImplyGeneric<<#= type #>?> <#= NewPropName() #>;
<# 
}
#>
	}

	internal partial class RelationalImplyGeneric<T>
	{
		// system objects
        RelationalImplyGeneric<object, T> <#= NewPropName() #>;
        RelationalImplyGeneric<T, object> <#= NewPropName() #>;
        RelationalImplyGeneric<string, T> <#= NewPropName() #>;
        RelationalImplyGeneric<T, string> <#= NewPropName() #>;

<# 
foreach(var type in systemTypes) {
#>
		RelationalImplyGeneric<<#= type #>, T> <#= NewPropName() #>;
		RelationalImplyGeneric<<#= type #>?, T> <#= NewPropName() #>;
		RelationalImplyGeneric<T, <#= type #>> <#= NewPropName() #>;
		RelationalImplyGeneric<T, <#= type #>?> <#= NewPropName() #>;
<# 
}
#>
	}
}
<#+
	private static int i = 0;
	private static string NewPropName()
	{
		return "Prop" + (++i);
	}
#>